// src/bot.js
import { Telegraf } from "telegraf";
import { supabase } from "./db.js";

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
const token = process.env.BOT_TOKEN;
if (!token) throw new Error("BOT_TOKEN is missing");
export const bot = new Telegraf(token);

// === –•–ï–õ–ü–ï–†: –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ê ===
async function isAdmin(userId) {
  const { data, error } = await supabase
    .from("admins")
    .select("user_id")
    .eq("user_id", userId)
    .limit(1);
  if (error) {
    console.error("[admins select] error:", error.message);
    return false;
  }
  return Array.isArray(data) && data.length === 1;
}

// === –õ–û–ì –í–°–ï–• –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏) ===
bot.on("text", async (ctx, next) => {
  try {
    console.log("[text]", ctx.message?.text, "from", ctx.from?.id);
  } catch {}
  return next();
});

// === –°–¢–ê–†–¢ ===
bot.start(async (ctx) => {
  const webAppUrl = 'https://bright-tiramisu-4df5d7.netlify.app/?v=5';
  await ctx.reply('–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üëá', {
    reply_markup: {
      keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å GRITHER', web_app: { url: webAppUrl } }]],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
});

// === –ü–û–ú–û–©–¨ ===
bot.command("help", async (ctx) => {
  await ctx.reply(
    [
      "–ö–æ–º–∞–Ω–¥—ã:",
      "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏",
      "/admin ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞",
      "/list ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç-–±–ª–æ–∫–æ–≤ (–∞–¥–º–∏–Ω)",
      "/get <slug> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
      "/set <slug>|–ó–∞–≥–æ–ª–æ–≤–æ–∫|–¢–µ–∫—Å—Ç ‚Äî —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫ (–∞–¥–º–∏–Ω)",
    ].join("\n")
  );
});

// === PING ===
bot.command("ping", async (ctx) => {
  await ctx.reply("pong");
});

// === –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ê ===
bot.command("admin", async (ctx) => {
  const ok = await isAdmin(ctx.from.id);
  await ctx.reply(ok ? "–¢—ã –∞–¥–º–∏–Ω ‚úÖ" : "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå");
});

// === –°–ü–ò–°–û–ö –ë–õ–û–ö–û–í (–ê–î–ú–ò–ù) ===
bot.command("list", async (ctx) => {
  if (!(await isAdmin(ctx.from.id))) {
    await ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå");
    return;
  }
  const { data, error } = await supabase
    .from("content_blocks")
    .select("slug,title,updated_at")
    .order("updated_at", { ascending: false })
    .limit(30);

  if (error) {
    await ctx.reply("–û—à–∏–±–∫–∞: " + error.message);
    return;
  }
  if (!data || data.length === 0) {
    await ctx.reply("–ü—É—Å—Ç–æ");
    return;
  }
  await ctx.reply(data.map((r) => `‚Ä¢ ${r.slug} ‚Äî ${r.title}`).join("\n"));
});

// === –ü–û–õ–£–ß–ò–¢–¨ –ö–û–ù–¢–ï–ù–¢: /get about ===
bot.command("get", async (ctx) => {
  const txt = ctx.message?.text || "";
  // –ø–æ–¥–¥–µ—Ä–∂–∏–º /get –∏ /get@–∏–º—è–±–æ—Ç–∞
  const payload = txt.replace(/^\/get(@\S+)?\s*/i, "");
  const slug = payload.trim();
  if (!slug) {
    await ctx.reply("–§–æ—Ä–º–∞—Ç: /get slug");
    return;
  }

  const { data, error } = await supabase
    .from("content_blocks")
    .select("*")
    .eq("slug", slug)
    .single();

  if (error || !data) {
    await ctx.reply("–ù–µ –Ω–∞–π–¥–µ–Ω–æ");
    return;
  }
  await ctx.reply(`*${data.title}*\n\n${data.body}`, { parse_mode: "Markdown" });
});

// === –°–û–ó–î–ê–¢–¨/–û–ë–ù–û–í–ò–¢–¨ –ö–û–ù–¢–ï–ù–¢: /set about|–ó–∞–≥–æ–ª–æ–≤–æ–∫|–¢–µ–∫—Å—Ç ===
bot.command("set", async (ctx) => {
  if (!(await isAdmin(ctx.from.id))) {
    await ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå");
    return;
  }

  const txt = ctx.message?.text || "";
  // –ø–æ–¥–¥–µ—Ä–∂–∏–º /set –∏ /set@–∏–º—è–±–æ—Ç–∞
  const payload = txt.replace(/^\/set(@\S+)?\s*/i, "");
  const parts = payload.split("|");
  const slug = (parts[0] || "").trim();
  const title = (parts[1] || "").trim();
  const body = parts.slice(2).join("|").trim();

  if (!slug || !title || !body) {
    await ctx.reply("–§–æ—Ä–º–∞—Ç: /set slug|–ó–∞–≥–æ–ª–æ–≤–æ–∫|–¢–µ–∫—Å—Ç");
    return;
  }

  const { data, error } = await supabase
    .from("content_blocks")
    .upsert({
      slug,
      title,
      body,
      updated_by: String(ctx.from.id),
    })
    .select()
    .single();

  if (error) {
    await ctx.reply("–û—à–∏–±–∫–∞: " + error.message);
    return;
  }

  console.log("[content_updated]", { slug, by: ctx.from.id });
  await ctx.reply(`OK: ${data.slug} –æ–±–Ω–æ–≤–ª—ë–Ω`);
});

// === –≠–ö–°–ü–û–†–¢ –í–ï–ë–•–£–ö–ê ===
export const webhookCallback = bot.webhookCallback("/");
